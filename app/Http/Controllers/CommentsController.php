<?php
/**
 * Created by Artdevue.
 * User: artdevue - CommentsController.php
 * Date: 2020-02-08
 * Time: 01:38
 * Project: gamesgo.club
 */

namespace App\Http\Controllers;


use App\Models\Comment;
use App\Models\CommentRate;
use App\Models\Game;
use Illuminate\Http\Request;

class CommentsController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * @param int     $game_id
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function getGame(int $game_id, Request $request, $game_name = null)
    {
        $current_page = $request->get('page', 1);
        $success = true;
        $full = $request->get('full', false) == 'true';

        $comments = Comment::whereGameId($game_id)
            ->whereConfirmed(1)
            ->orWhere(function ($query) use ($game_id) {
                if ($this->user) {
                    $query->whereGameId($game_id)->whereConfirmed(0)->where('user_id', $this->user->id);
                } else {
                    $query->whereGameId($game_id)->whereConfirmed(0)->where(function ($query) {
                        $query->whereUserId(0)
                            ->orWhereNull('user_id');
                    })->where('ip_user', request()->ip());
                }
            })
            ->orderBy('created_at', 'DESC')
            ->paginate(config('site.comments.per_page', 6));

        //$comments->withPath('/comments/game/' . $game_id);
        $comments->setPath(route('comments.get.game', ['game_url' => $game_id]));
        $count_next_page = ($comments->currentPage() + 1 == $comments->lastPage() ? $comments->total() - (config('site.comments.per_page', 6) * $comments->currentPage()) : config('site.comments.per_page', 6));

        $show_more = $comments->currentPage() < $comments->lastPage();
        $html = view('comments', compact('comments', 'full', 'count_next_page', 'game_name', 'show_more'))->render();

        $total = $comments->total();
        $loadmore_text = $this->lang['show_more'] . ' ' . $count_next_page . ' ' . plural($count_next_page, $this->lang['plural_review'], $this->current_locale->id ?? 1);

        return response()->json(compact('success', 'html', 'current_page', 'full', 'total', 'show_more', 'loadmore_text'), 200);
    }

    /**
     * @param Game    $game
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postNew(Game $game, Request $request)
    {
        $success = false;
        $message = $this->lang['сomment_must_not_be_empty'];
        $text = trim(strip_tags($request->get('comment')));

        if (!empty($text)) {

            try {

                if ($game->getLastUserComment()) {
                    throw new \Exception(sprintf($this->lang['interval_between_publication_comment_east_minutes'], config('site.comments.interval')));
                }

                if (mb_strlen(strip_tags($request->get('comment')), 'UTF-8') > config('site.comments.max_length')) {
                    throw new \Exception(sprintf($this->lang['message_cannot_be_more_characters'], config('site.comments.max_length')));
                }

                // Create new comment
                $comment = new Comment();
                if ($this->user) {
                    $comment->user_id = $this->user->id;
                }
                $comment->ip_user = $request->ip();
                $comment->game_id = $game->id;
                $comment->name = trim(strip_tags($request->get('name')));
                $comment->text = $text;
                $comment->confirmed = 0;
                $comment->save();

                $success = true;
                $message = $this->lang['added_new_comment_moderated'];

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postRate(Request $request)
    {
        $error = true;
        $message = $this->lang['invalid_request'];
        $comment_id = (int)$request->get('comment_id');
        $rates = false;

        if ($request->ajax()) {
            try {
                // Get comment
                $comment = Comment::find($comment_id);
                if (!$comment) {
                    throw new \Exception($this->lang['сomment_not_found']);
                }

                // Check is add commenting
                if ($comment->isCheckUserRate()) {
                    throw new \Exception($this->lang['you_have_already_voted']);
                }

                // Add vodet
                $comment_rate = new CommentRate();
                $comment_rate->comment_id = $comment->id;
                $comment_rate->user_ip = $request->ip();
                if ($this->user) {
                    $comment_rate->user_id = $this->user->id;
                }
                $comment_rate->rate_check = (int) $request->get('rate', 0);
                $comment_rate->save();

                $rates = $comment->reorderRate();

                $error = false;
                $message = $this->lang['your_vote_accepted'];

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('error', 'message', 'rates'), 200);
    }

    /**
     * @param Comment $comment
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postCommentUpdate(Comment $comment, Request $request)
    {
        $success = false;
        $message = $this->lang['invalid_request'];
        $text = trim(strip_tags($request->get('comment')));

        if ($request->ajax() && !empty($text)) {
            try {
                // Check this user
                if (!$comment->isCheckUser()) {
                    throw new \Exception($this->lang['comment_is_not_yours']);
                }

                if (!$comment->isChange()) {
                    throw new \Exception($this->lang['change_timed_out']);
                }

                if (mb_strlen(strip_tags($request->get('comment')), 'UTF-8') > config('site.comments.max_length')) {
                    throw new \Exception(sprintf($this->lang['message_cannot_be_more_characters'], config('site.comments.max_length')));
                }

                // Dekete comment
                $comment->update(compact('text'));
                $success = true;
                $message = $this->lang['you_have_update_your_comment'];

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }

    /**
     * @param Comment $comment
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postCommentDelete(Comment $comment, Request $request)
    {
        $success = false;
        $message = $this->lang['invalid_request'];

        if ($request->ajax()) {
            try {
                // Check this user
                if (!$comment->isCheckUser()) {
                    throw new \Exception($this->lang['comment_is_not_yours']);
                }

                if (!$comment->isChange()) {
                    throw new \Exception($this->lang['change_timed_out']);
                }

                // Dekete comment
                $comment->delete();
                $success = true;
                $message = $this->lang['you_have_deleted_your_comment'];

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }
}