<?php
/**
 * Created by Artdevue.
 * User: artdevue - AccountController.php
 * Date: 2020-02-06
 * Time: 14:00
 * Project: gamesgo.club
 */

namespace App\Http\Controllers;

use App\Models\UserActivation;
use Illuminate\Http\Request, Validator;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Illuminate\Validation\Rule;
use Intervention\Image\Facades\Image;
use Mail;

class AccountController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth.site');
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getAccount()
    {
        return view('account.get');
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postUpdate(Request $request)
    {
        $input_all = $request->only(['name', 'username', 'email']);
        $error = true;
        $message = $this->lang['invalid_request'];

        if ($request->ajax()) {

            $validator = Validator::make($input_all, [
                'username' => [
                    'required',
                    'alpha_dash',
                    'max:255',
                    Rule::unique('users')->ignore($this->user->id),
                ],
                'email' => [
                    'required',
                    'email',
                    'max:255',
                    Rule::unique('users')->ignore($this->user->id),
                ],
                /*'name'     => [
                    'required',
                    'max:255'
                ],*/
            ]);

            if ($validator->fails()) {
                $message = $validator->messages()->all(':message<br/>');
                goto returnjson;
            }

            try {
                $input_all['name'] = $input_all['username'];
                $this->user->update($input_all);

                $message = $this->lang['info_updated'];
                $error = false;

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
                goto returnjson;
            }
        }

        returnjson:
        return response()->json(compact('error', 'input_all', 'message'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postChangePassword(Request $request)
    {
        $input_all = $request->except('_method', '_token');
        $error = true;
        $message = $this->lang['invalid_request'];

        if ($request->ajax()) {

            $validator = Validator::make($input_all, [
                'oldpassword' => 'required|string|max:255',
                'newpassword' => 'required|string|confirmed|min:6'
            ], [
                'oldpassword.required' => __('validation.required'),
            ]);

            if ($validator->fails()) {
                $message = $validator->messages()->all(':message<br/>');
                goto returnjson;
            }

            if (!password_verify($input_all['oldpassword'], $this->user->password)) {
                $message = $this->lang['current_password_not_correct'];
                goto returnjson;
            }

            try {
                $this->user->update(['password' => $input_all['newpassword']]);

                $message = $this->lang['change_assword'];
                $error = false;

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
                goto returnjson;
            }
        }

        returnjson:
        return response()->json(compact('error', 'message'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postChangeAvatar(Request $request)
    {
        $input_all = $request->except('_method', '_token');
        $error = true;
        $image = substr($this->user->username, 0, 1);
        $message = $this->lang['invalid_request'];
        $avatarname = md5($this->user->id);

        if ($request->ajax()) {

            if (!empty($input_all['delete'])) {
                // Delete images
                $this->user->update(['avatar' => '']);

                // Delete old image
                Storage::disk('images')->delete('users/' . $avatarname);

                $message = $this->lang['saved'];
                $error = false;
                goto returnjson;
            }

            $validator = Validator::make($input_all, [
                'avatar' => 'image|mimes:jpeg,png,jpg,gif|max:10000' // max 10000kb
            ]);

            if ($validator->fails()) {
                $message = $validator->messages()->all(':message<br/>');
                goto returnjson;
            }

            if ($request->hasFile('avatar')) {

                try {
                    $image = $request->file('avatar');
                    $avatarext = $image->getClientOriginalExtension();

                    $avatar = Image::make($image->getRealPath());

                    // Create directory Avatar of storage
                    if (!Storage::disk('images')->exists('users/' . $avatarname)) {

                        Storage::disk('images')->makeDirectory('users/' . $avatarname, 0775, true); //creates directory
                    }

                    $avatar->save(Storage::disk('images')->path('users/' . $avatarname . '/original.' . $avatarext), 100);

                    // Save Big Images
                    $avatar->fit(150, 150, function ($constraint) {
                        $constraint->upsize();
                    });
                    $avatar->save(Storage::disk('images')->path('users/' . $avatarname . '/big_original.' . $avatarext), 100);

                    // Save Normal Images
                    $avatar->fit(70, 70, function ($constraint) {
                        $constraint->upsize();
                    });
                    $avatar->save(Storage::disk('images')->path('users/' . $avatarname . '/normal_original.' . $avatarext), 100);

                    // Save Small Images
                    $avatar->fit(48, 48, function ($constraint) {
                        $constraint->upsize();
                    });
                    $avatar->save(Storage::disk('images')->path('users/' . $avatarname . '/small_original.' . $avatarext), 100);

                    $this->user->update(['avatar' => 'original.' . $avatarext]);
                    $image = '/storage/images/users/' . $avatarname . '/big_original.' . $avatarext . '?time=' . time();
                    $message = $this->lang['saved'];
                    $error = false;

                } catch (\Exception $e) {
                    // do task when error
                    $message = $e->getMessage();
                }
            }
        }

        returnjson:
        return response()->json(compact('error', 'image', 'message'), 200);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     */
    public function postReactivation()
    {
        $message = $this->lang['your_account_activated'];
        $success = false;

        if ($this->user->status < 1) {
            // Get Activation code
            $act_code = UserActivation::where('user_id', $this->user->id)->first();
            if ($act_code) {

                Mail::send('emails.register', [
                    'user' => $this->user,
                    'title' => $this->lang['registration'],
                    'link' => route('confirm', ['token' => $act_code->token])
                ], function ($m) {
                    $m->to($this->user->email, $this->user->name)->subject($this->lang['registration']);
                });

                $success = true;
                $message = $this->lang['verification_link_sent_email'];
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }
}