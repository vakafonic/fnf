<?php
/**
 * Created by Artdevue.
 * User: artdevue - FeedbackController.php
 * Date: 2020-02-05
 * Time: 20:34
 * Project: gamesgo.club
 */

namespace App\Http\Controllers;

use App\Models\Feedback;
use App\User;
use Illuminate\Http\Request, Validator;
use Illuminate\Support\Facades\Auth;
use Mail;

class FeedbackController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function getForm()
    {
        $success = true;
        $html = view('feedback_form')->render();
        return response()->json(compact('success', 'html'), 200);
    }

    public function postForm(Request $request)
    {
        $input_all = $request->except('_method', '_token');
        $error = true;
        $message = $this->lang['invalid_request'];

        if ($request->ajax()) {
            $validator = Validator::make($input_all, [
                'email' => 'required|email',
                'message' => 'required|max:2000|min:10'
            ]);

            if ($validator->fails()) {
                $message = $validator->messages()->all(':message<br/>');
                goto returnjson;
            }

            // Check letter from database
            /*$date = strtotime('-15 minutes');
            $prev_message = Feedback::where('created_at', '>', date('Y-m-d H:i:s', $date))
                ->where(function ($query) use ($request, $input_all) {
                    $query->where('ip_user', '=', $request->ip())->orWhere('email', '=', $input_all['email']);
                })->count();
            if ($prev_message > 0 ) {
                $message = $this->lang['interval_between_sending_15min'];
                goto returnjson;
            }*/

            // Save in the database
            $fwwdback = new Feedback();
            $fwwdback->email = $input_all['email'];
            $fwwdback->message = strip_tags($input_all['message']);
            $fwwdback->url = $request->headers->get('referer');
            $fwwdback->ip_user = $request->ip();
            $fwwdback->user_id = Auth::guest() ? null : Auth::user()->id;
            $fwwdback->save();

            // Get Emails of admin
            //$admins = User::whereRole(1)->whereStatus(1)->get();
            $input_all['title'] = $this->lang['feedback'];

            /*foreach ($admins as $user) {
                // Send letter
                Mail::send('emails.feedback', [
                    'email'    => $fwwdback->email,
                    'title'    => $this->lang['feedback'],
                    'messagef' => $fwwdback->message,
                    'username' => $user->name
                ], function ($m) use ($user) {
                    $m->from(config('mail.from.address'), config('mail.from.name'));

                    $m->to($user->email, $user->name)->subject($this->lang['feedback']);
                });
            }*/

            Mail::send('emails.feedback', [
                'email' => $fwwdback->email,
                'link' => $fwwdback->url,
                'title' => $this->lang['feedback'],
                'messagef' => $fwwdback->message,
                'username' => 'Админимстратор'
            ], function ($m) {
                $m->from(config('mail.from.address'), config('mail.from.name'));

                $m->to(config('site.mail_feedback'))->subject($this->lang['feedback']);
            });

            $error = false;
            $message = $this->lang['thank_you_your_message'];

        }

        returnjson:
        return response()->json(compact('error', 'message'), 200);
    }
}