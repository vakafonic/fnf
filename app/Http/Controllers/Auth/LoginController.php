<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\PasswordReset;
use App\User;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Illuminate\Foundation\Auth\SendsPasswordResetEmails;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;


class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;
    use SendsPasswordResetEmails;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    protected $redirectTo = '/';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except('logout');

        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * Get Login Form
     *
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function getLogin()
    {
        $success = true;
        $html = view('auth.getlogin')->render();
//        echo view('auth.getlogin')->getPath();
        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @param Request $request
     * @param mixed   $user
     * @return \Illuminate\Http\JsonResponse|mixed
     */
    protected function authenticated(Request $request, $user)
    {
        $error = true;
        $html = $this->lang['invalid_request'];

        if ($request->ajax()) {
            if (auth()->check()) {

                if ($user->ban) {
                    $this->guard()->logout();
                    $request->session()->invalidate();
                    $html = $this->lang['your_account_has_been_banned'];
                } else {
                    $error = false;
                    $html = $this->lang['hello'] . ' ' . ($user->name ?? $user->username) . '. ' . $this->lang['signing_in_site'];
                }
            }
        }

        return response()->json(compact('error', 'html'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function recovery(Request $request)
    {
        /*$this->validate($request, ['email' => 'required|email|exists:users']);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $response = $this->broker()->sendResetLink($request->only('email'));

        return $response == Password::RESET_LINK_SENT
            ? $this->sendResetLinkResponse($response)
            : $this->sendResetLinkFailedResponse($request, $response);*/

        $input_all = $request->except('_method', '_token');
        $error = true;
        $html = $this->lang['invalid_request'];

        if ($request->ajax()) {
            $validator = Validator::make($input_all, ['email' => 'required|email|exists:users']);

            if ($validator->fails()) {
                $html = $this->lang['enter_valid_email'];
                return response()->json(compact('error', 'html'), 200);
            }

            $user = User::whereEmail($input_all['email'])->first();

            if (!$user) {
                $html = $this->lang['user_with_such_email_not_found'];
              return response()->json(compact('error', 'html'), 200);
            }

            $token = $this->broker()->createToken($user);
            $error = false;

            if ($password_reset = PasswordReset::whereEmail($user->email)->first()) {
                $password_reset->delete();
            }

            PasswordReset::insert(
                ['email' => $user->email, 'token' => $token, 'created_at' => date("Y-m-d H:i:s")]
            );
            Mail::send('emails.reminder', [
                'user'  => $user,
                'title' => $this->lang['reset_assword'],
                'link'  => route('reset.password', compact('token'))
            ], function ($m) use ($user) {
                $m->to($user->email, $user->name)->subject($this->lang['reset_assword']);
            });


        }
        return response()->json(['error' => false], 200);
    }

    /**
     * @param $token
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function getResetPassword($token)
    {
        $check = false;

        $password_reset = PasswordReset::whereToken($token)->first();
        if ($password_reset) {
            $check = true;
        }

        return view('auth.passwords.reset', compact('check', 'token'));

    }

    /**
     * @param $token
     * @return \Illuminate\Http\JsonResponse
     */
    public function postResetPassword($token, Request $request)
    {
        $success = false;
        $message = $this->lang['link_is_invalid'];
        $password_reset = PasswordReset::whereToken($token)->first();
        $password = $request->get('password');
        if ($password_reset && $password) {

            // Get user
            $user = User::whereEmail($password_reset->email)->first();
            if ($user) {
                $password_reset->delete();

                $user->password = $password;
                $user->save();

                $success = true;
                $message = $this->lang['change_assword'];
            } else {
                $message = $this->lang['user_with_such_email_not_found'];
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }
}
