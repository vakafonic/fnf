<?php

namespace App\Http\Controllers\Auth;

use App\Models\UserActivation;
use App\User;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request, Validator;
use Illuminate\Foundation\Auth\RegistersUsers;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Mail;

class RegisterController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Register Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users as well as their
    | validation and creation. By default this controller uses a trait to
    | provide this functionality without requiring any additional code.
    |
    */

    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = '/';

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest')->except(['getConfirm']);
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param array $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name'     => 'required|string|max:255',
            'email'    => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:6|confirmed',
        ], [
            'email.required' => $this->lang['fill_field'],
            'email.unique' => $this->lang['email_already_exists'],
            'username.unique' => $this->lang['username_already_exists'],
            'password.min' => sprintf($this->lang['at_least__characters'], 6),
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param array $data
     * @return \App\User
     */
    protected function create(array $data)
    {
        return User::create([
            'name'     => $data['name'],
            'email'    => $data['email'],
            'password' => bcrypt($data['password']),
        ]);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function getForm()
    {
        $success = true;
        $html = view('auth.getregister')->render();
        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postForm(Request $request)
    {
        $input_all = $request->except('_method', '_token');
        $error = true;
        $message = $this->lang['invalid_request'];
        $html = '';

        if ($request->ajax()) {

            $validator = Validator::make($input_all, [
                'email'    => 'required|email|unique:users',
                'username' => 'required|min:3|max:255|unique:users',
                'password' => 'required|string|min:6'
            ], [
                'email.required' => $this->lang['fill_field'],
                'email.unique' => $this->lang['email_already_exists'],
                'username.unique' => $this->lang['username_already_exists'],
                'password.min' => sprintf($this->lang['at_least__characters'], 6),
            ]);

            if ($validator->fails()) {
                return response()->json(['error' => true, 'message' => $errors = $validator->errors()]);
            }

            // Register user
            try {
                $user = User::create([
                    'name'     => $input_all['username'],
                    'username' => $input_all['username'],
                    'email'    => $input_all['email'],
                    'password' => $input_all['password'],
                ]);

                Auth::login($user, true);

                $message = $this->lang['verification_link_sent_email'];
                $error = false;

                $token = $this->createActivation($user);

                Mail::send('emails.register', [
                    'user'  => $user,
                    'title' => $this->lang['registration'],
                    'link'  => route('confirm', compact('token'))
                ], function ($m) use ($user) {
                    $m->to($user->email, $user->name)->subject($this->lang['registration']);
                });

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
                goto returnjson;
            }
        }

        returnjson:
        return response()->json(compact('error', 'html', 'message'), 200);
    }

    /**
     * @param string $token
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\RedirectResponse|\Illuminate\View\View
     */
    public function getConfirm(string $token)
    {
        $user_activation = $this->getActivationByToken($token);
        if ($user_activation) {
            // Activate User
            $user = User::find($user_activation->user_id);

            if ($user) {
                $user->update(['status' => 1]);
                // delete Activation
                $user_activation->delete();

                if (!Auth::check()) {
                    Auth::login($user);
                }

                return redirect()->route('account')->with('success', $this->lang['your_account_activated']);
            }
        }

        return view('errors.401');
    }

    /**
     * @param $user
     * @return mixed
     */
    public function getActivation($user)
    {
        return UserActivation::where('user_id', $user->id)->first();
    }

    /**
     * @param $token
     * @return mixed
     */
    public function getActivationByToken($token)
    {
        return UserActivation::where('token', $token)->first();
    }

    /**
     * @param $token
     */
    public function deleteActivation($token)
    {
        UserActivation::where('token', $token)->delete();
    }

    /**
     * @param $user
     * @return mixed
     */
    public function createActivation($user)
    {
        $activation = $this->getActivation($user);

        if (!$activation) {
            return $this->createToken($user);
        }
        return $this->regenerateToken($user);
    }

    /**
     * @return string
     */
    protected function getToken()
    {
        return hash_hmac('sha256', str_random(40), config('app.key'));
    }

    /**
     * @param $user
     * @return string
     */
    private function regenerateToken($user)
    {
        $token = $this->getToken();
        UserActivation::where('user_id', $user->id)->update([
            'token'      => $token,
            'created_at' => new Carbon()
        ]);
        return $token;
    }

    /**
     * @param $user
     * @return string
     */
    private function createToken($user)
    {
        $token = $this->getToken();
        UserActivation::insert([
            'user_id'    => $user->id,
            'token'      => $token,
            'created_at' => new Carbon()
        ]);
        return $token;
    }
}
