<?php
/**
 * Created by Artdevue.
 * User: artdevue - GameController.php
 * Date: 2020-01-25
 * Time: 22:06
 * Project: gamesgo.club
 */

namespace App\Http\Controllers;


use App\Models\Game;
use App\Models\GameFavorite;
use App\Models\GamesGenre;
use App\Models\GamesHeroe;
use App\Models\GamesLang;
use App\Models\GamesLike;
use App\Models\GamesSimilar;
use App\Models\GamesUnicUser;
use App\Models\Genre;
use App\Models\Heroes;
use App\Models\Page;
use App\Models\PopupLang;
use App\Options\GamesGeneralOption;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Mcamara\LaravelLocalization\LaravelLocalization;
use App\Models\Language;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use function foo\func;
use function GuzzleHttp\Psr7\str;

class GameController extends Controller
{
    public $update_game_user = null;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    public function gamepage(string $url)
    {
        $game = Game::whereUrl($url)->first();
        if (!$game || ($game->public != 1 && (Auth::guest() || Auth::user()->role < 1))) {
            return $this->get404Code();
        }

        $lang_page = $game->langsArray($this->current_locale->id);

        $breadcrumbs = [
            [
                'url' => route('index'),
                'name' => $this->lang['home']
            ],
            [
                'url' => route('mods'),
                'name' => $this->lang['FNF_mods']
            ],
            [
                'url' => '',
                'name' => $lang_page['name']
            ],
        ];

        $comands = unserialize($game->comands);

        return view(
            'games.page',
            compact(
            'game',
                'lang_page',
                'breadcrumbs',
                'comands'
            )
        );
    }

    /**
     * @param $url
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\JsonResponse|\Illuminate\View\View
     */
    public function getGame($url)
    {
        // Get Game
        $relatedCategoryID = [];
        $relatedCategoriesBreadcrumbs = [];
        $game = Game::whereUrl($url)->first();
        $game_id = $game->id;
        if (!$game || ($game->public != 1 && (Auth::guest() || Auth::user()->role < 1))) {
            return $this->get404Code();
        }

        $comments_contr = new CommentsController();
        request()->merge([
            'full' => 'true',
        ]);

        // Set Vizit for User
        $game->setVizit();

        $game_lang = $game->langsArray($this->current_locale->id);

        $comments = json_decode($comments_contr->getGame($game->id, request(), $game_lang->name)->content());

        $comands = unserialize($game->comands);
        $popup = PopupLang::wherePopupId(1)->whereLangId($this->current_locale->id)->first();

        // genresAboutGame
        $get_via_game_id = Genre::getViaGameId($game->id, $this->current_locale->id, false);
        $get_heroes_via_game_id = Heroes::getViaGameId($game->id, $this->current_locale->id);
        $genresAboutGame = view('games.post_genre', compact('get_via_game_id', 'get_heroes_via_game_id'))->render();

        // Series
        $limit = config('site.page.series.' . (isMobileDevice() ? 'm' : 'd'));
        //$games = Game::getGamesofGameId($this->current_locale->id, $game->id, 'games.rating', $limit, 0);
        $games = Game::getRelatedGames($this->current_locale->id, $game->id, $limit, 0);
        $more_page = $games->count() == $limit ? 2 : false;
        $gamesSeries = view('games.similar_games', compact('games'))->render();

        // similarGames
        $games = Game::getGamesOfSimilars($this->current_locale->id, $game->id);
        $similarGames = view('games.similar_games', compact('games', 'game_id'))->render();

        $tablesForFilter = [
            'size_width', 'height', 'width', 'iframe_url', 'url_site', 'link_game', 'mobi', 'target_blank',
            'no_block_ad', 'sandbox'
        ];

        foreach ($tablesForFilter as $tableName) {
            if ($game_lang->$tableName) {
                $game->$tableName = $game_lang->$tableName;
            }
        }

        $generalCategory = GamesGenre::whereGameId($game_id)->where('general', '=', 1)->pluck('genry_id')->toArray();
        if(count($generalCategory) > 0){
            $generalCategory = reset($generalCategory);
            $relatedCategoryID[] = $generalCategory;
            $parentGenre = Genre::whereId($generalCategory)->pluck('pid')->toArray();
            $parentGenre = reset($parentGenre);
            if($parentGenre != 0){
                $relatedCategoryID[] = $parentGenre;
                $parentGenre = Genre::whereId($parentGenre)->pluck('pid')->toArray();
                $parentGenre = reset($parentGenre);
                if($parentGenre != 0){
                    $relatedCategoryID[] = $parentGenre;
                    $parentGenre = Genre::whereId($parentGenre)->pluck('pid')->toArray();
                    $parentGenre = reset($parentGenre);
                    if($parentGenre != 0){
                        $relatedCategoryID[] = $parentGenre;
                    }
                }
            }
        }
        if(count($relatedCategoryID) > 0){
            $relatedCategoryID = array_reverse($relatedCategoryID);
            foreach($relatedCategoryID as $key => $item){
                $category = Genre::join('genre_langs', 'genres.id', '=', 'genre_langs.genre_id')
                                   ->where('genre_langs.lang_id', $this->current_locale->id)
                                   ->where('genres.id', $item)
                                   ->select('genre_langs.value', 'genres.url')
                                   ->get()
                                   ->toArray();
                $category = reset($category);
                $relatedCategoriesBreadcrumbs[$key]['value'] = $category['value'];
                $relatedCategoriesBreadcrumbs[$key]['url'] = $category['url'];
            }
        }

        return view('games.get', compact('game', 'game_lang', 'comands', 'popup', 'comments',
            'genresAboutGame', 'gamesSeries', 'similarGames', 'relatedCategoriesBreadcrumbs', 'more_page'));
    }

    /**
     * @param int $game_id
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postGenre(int $game_id)
    {
        $success = true;

        $get_via_game_id = Genre::getViaGameId($game_id, $this->current_locale->id, false);
        $get_heroes_via_game_id = Heroes::getViaGameId($game_id, $this->current_locale->id);

        $html = view('games.post_genre', compact('get_via_game_id', 'get_heroes_via_game_id'))->render();

        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @param int $game_id
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postSeries(int $game_id, Request $request)
    {
        $page = $request->get('page', 1);

        $limit = config('site.page.series.' . (isMobileDevice() ? 'm' : 'd'));
        $ofset = $limit * $page - $limit;
        $games = Game::getRelatedGames($this->current_locale->id, $game_id, $limit, $ofset);

        $more_page = $games->count() == $limit ? $page + 1 : false;

        $html = view('games.similar_games', compact('games'))->render();
        $success = strlen($html) > 10;

        return response()->json(compact('success', 'html', 'more_page'), 200);
    }

    /**
     * @param int $game_id
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postSimilar(int $game_id)
    {
        $games = Game::getGamesOfSimilars($this->current_locale->id, $game_id);

        $html = view('games.similar_games', compact('games'))->render();
        $success = strlen($html) > 10;

        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @param string $url
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\JsonResponse|\Illuminate\View\View
     */
    public function games(string $url, Request $request)
    {
        $best = substr($url, 0, 5) == 'best-';
        $current_page = $request->get('page', 1);

        $page = Page::whereUrl($url)->wherePublic(1)->first();

        if (!$page) {
            return $this->get404Code();
        }

        $lang_page = $page->langsArray($this->current_locale->id);

        $lang_page_best = null;
        $url_many = $url;

        // Get Best Page
        if (!$best) {
            $page_best = Page::whereUrl('best-' . $url)->wherePublic(1)->first();
        } else {
            $url_many = substr($url, 5);
            $page_best = Page::whereUrl($url_many)->wherePublic(1)->first();
        }

        if ($best) {
            $lang_page_best = true;
        }

        $games = $this->modelGames($best);

        if (request()->get('page') > $games->lastPage()) {
            return $this->get404Code();
        }

        $htmlBlock = $this->postGames($url, $best, 1, $page->id, $request, true);

        return view('games', compact('best', 'url', 'lang_page_best', 'current_page', 'url_many',
            'page', 'lang_page', 'htmlBlock'));
    }

    public function postGames(string $url, int $best, int $full, int $id, Request $request, $array = false)
    {
        $best = substr($url, 0, 5) == 'best-';
        $current_page = $request->get('page', 1);
        $success = true;

        $games = $this->modelGames($best, null, $request->get('loadmoreBests'), $request->get('offset'));
        //$games->withPath($url);
        $games->setPath(route('games', compact('url')));


        $best_game = 1;

        $html = view('games.url_post', compact('games', 'full', 'best_game'))->render();

        $show_more = $games->currentPage() != $games->lastPage() && $games->count() > 0;

        $sum_total_items = $games->total() - $games->currentPage() * $this->per_page;
        $show_number = $sum_total_items < $this->per_page ? $sum_total_items : $this->per_page;

        $return = compact('success', 'html', 'current_page', 'show_more', 'show_number');

        if ($array)
            return $return;

        return response()->json($return, 200);
    }

    /**
     * @param false $best
     * @param null $paginateLimit
     * @param false $isLoadMoreBests
     *
     * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
     */
    public function modelGames($best = false, $paginateLimit = null, $isLoadMoreBests = false, $offset = false)
    {
        $gameSeries = GamesSimilar::where('position', '!=', 1)->pluck('id_game_s')->toArray();

        $query = Game::query();

        $query->rightJoin('games_langs', 'games.id', '=', 'games_langs.games_id')
            ->where('games_langs.lang_id', $this->current_locale->id)
            ->where('games.public', 1)
            ->whereNotIn('games.id', $gameSeries);
        if ($this->mob) {
            $query->orderBy('games.mobi', 'DESC');
        }

        if ($best) {
            //$best_ids = Game::getGamesIdsOfGenryBest();
            //$query->whereIn('games.id', $best_ids);
            //$query->where('games.rating', '>', 0);
            //$query->orderBy('games.best_game', 'DESC')->orderBy('games.rating', 'DESC');
            $query->orderBy('games.top', 'DESC')->orderBy('games.good', 'DESC')->orderBy('games.rating', 'DESC');
        }

        $query->orderBy('games.created_at', 'DESC')
              ->select('games.id', 'games.image', 'games.image_cat', 'games.url', 'games.video', 'games.best_game',
                  'games.rating', 'games.created_at', 'games_langs.name', 'games.mobi');


        if($offset){
            if ($isLoadMoreBests) {
                $result = $query->paginate($this->per_page + $offset);
                for ($i = 0; $i < $offset; $i++) {
                    $result->getCollection()->forget($i);
                }
            }
        } else {
            if ($isLoadMoreBests) {
                $result = $query->paginate($this->per_page + 10);
                for ($i = 0; $i < 10; $i++) {
                    $result->getCollection()->forget($i);
                }
            } else {
                $result = $query->paginate($paginateLimit ?? $this->per_page);
            }
        }

        return $result;
    }

    /**
     * @param string $url
     * @param string $slug
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\Http\JsonResponse|\Illuminate\View\View
     */

    public function getGamesHeroGenry(string $url, string $slug, Request $request)
    {
        $pages = app(Page::class);
        $bestPages = array_map(function ($item) {
            return $item["url"];
        }, $pages->getBestPages());
        $generalCategory = [];
        $relatedCategoryID = [];
        $relatedCategoriesBreadcrumbs = [];
        foreach ($bestPages as $bestPageItem) {
            $bestPageItem == $slug ? $isMainMenuPage = true : $isMainMenuPage = false;
            if ($isMainMenuPage === true) break;
        }

        $best = substr($slug, 0, 5) == 'best-';
        $current_page = $request->get('page', 1);

        $url_many = $best ? substr($slug, 5) : $slug;

        if ($url === 'filter') {
            /** @var Page|null $pageModel */
            $page = Page::where('url', $slug)->first();
        } else {
            $page = $url == 'genre' ? Genre::whereUrl($url_many)->wherePublic(1)->first() : Heroes::whereUrl($url_many)->wherePublic(1)->first();
        }
        if (!$page) {
            return $this->get404Code();
        }

        $categories = null;

        // If Genry then get Chidren or parents Genries  11 - 17
        if ($url == 'genre') {
            $cat_ids = $this->getOneArrayFromMulti(Genre::getParentGenreId($page->id, 0));
            $cat_ids = array_diff($cat_ids, [$page->id]);

            if (count($cat_ids) == 0 && $page->pid != 0) {
                $cat_ids = $this->getOneArrayFromMulti(Genre::getParentGenreId($page->pid, 0));
                $cat_ids = array_diff($cat_ids, [$page->id]);
            }

            if (count($cat_ids) > 0) {

                $additionalField = null;
                switch ($page->id) {
                    case 174:
                        $additionalField = 'is_for_girls';
                        break;
                    case 201:
                        $additionalField = 'is_for_boys';
                        break;
                    case 202:
                        $additionalField = 'is_for_kids';
                        break;
                }

                // Get Games of categories
                $games_categories = GamesGenre::whereIn('genry_id', $cat_ids)->groupBy('genry_id')->pluck('genry_id')->toArray();
                if (count($games_categories) > 0) {
                    $categories = Genre::join('genre_langs', 'genres.id', '=', 'genre_langs.genre_id')
                        ->where('genre_langs.lang_id', $this->current_locale->id)
                        ->whereIn('genres.id', $games_categories)
                        ->where('genres.public', 1)
                        ->orWhere(function ($q) use ($additionalField) {
                            if ($additionalField) {
                                $q->where("genres.$additionalField", 1)->where('genre_langs.lang_id', $this->current_locale->id);
                            }
                        })
                        ->orderBy('genres.sort', 'ASC')
                        ->select('genres.image', 'genres.url', 'genre_langs.value as name')
                        ->get();
                }
            }
        } elseif ($url == 'hero') {
            $categories = Heroes::join('heroes_langs', 'heroes.id', '=', 'heroes_langs.heroes_id')
                        ->where('heroes_langs.langs_id', $this->current_locale->id)
                        ->where('heroes.public', 1)
                        ->where('heroes.general', $page->general)
                        ->select('heroes.image', 'heroes.url', 'heroes_langs.value as name')
                        ->get();
        }

        $lang_page = $page->langsArray($this->current_locale->id);
        $lang_page_best = null;

        // Get Best Page
        if (!$best) {
            $page_best = Page::whereUrl('best-' . $url_many)->wherePublic(1)->first();
        } else {
            //$url_many = substr($slug, 5);
            $page_best = Page::whereUrl($url_many)->wherePublic(1)->first();
        }

        if ($page_best) {
            $lang_page = $page_best->langsArray($this->current_locale->id);
            $lang_page_best = true;
            //$url_many = substr($page_best->url, 5);
        }

        if ($page_seo = Page::whereUrl($slug)->wherePublic(1)->first()) {
            $lang_page = $page_seo->langsArray($this->current_locale->id);
        }
        if ($url === 'filter') {
            $relatedCategoriesBreadcrumbs = [['value' => $page->getMenuName($this->current_locale->id)]];
            $games = $page->getGamesByFilter($this->current_locale->id)->paginate($this->per_page);
            $skipBestTab = true;
        } else {
            $games = $this->modelGamesHeroGenryTopGood($best, $url, $page->id);
            $skipBestTab = false;
        }

        if (request()->get('page') > $games->lastPage()) {
            return $this->get404Code();
        }
        if (is_null($lang_page_best) && $best) {
            $categoryName = $lang_page->value ?? $lang_page->name;
            $categoryName = mb_strtolower($categoryName);
            $bestBreadcrumb = $this->lang['best_games'] . ' ' . $categoryName;
            $bestBreadcrumb = explode(' ', $bestBreadcrumb);
            $bestBreadcrumb = array_unique($bestBreadcrumb);
            $lang_page->value = implode(' ', $bestBreadcrumb);
        }
        $htmlBlock = $this->postGamesHeroGenry($url, $slug, $best, 1, $page->id, $request, true);
        if($url != 'hero' && empty($relatedCategoriesBreadcrumbs)){
            $generalCategory = $page->id;
            $relatedCategoryID[] = $generalCategory;
            $parentGenre = Genre::whereId($generalCategory)->pluck('pid')->toArray();
            $parentGenre = reset($parentGenre);
            if($parentGenre != 0){
                $relatedCategoryID[] = $parentGenre;
                $parentGenre = Genre::whereId($parentGenre)->pluck('pid')->toArray();
                $parentGenre = reset($parentGenre);
                if($parentGenre != 0){
                    $relatedCategoryID[] = $parentGenre;
                    $parentGenre = Genre::whereId($parentGenre)->pluck('pid')->toArray();
                    $parentGenre = reset($parentGenre);
                    if($parentGenre != 0){
                        $relatedCategoryID[] = $parentGenre;
                    }
                }
            }
            $relatedCategoryID = array_reverse($relatedCategoryID);
            foreach($relatedCategoryID as $key => $item){
                $category = Genre::join('genre_langs', 'genres.id', '=', 'genre_langs.genre_id')
                    ->where('genre_langs.lang_id', $this->current_locale->id)
                    ->where('genres.id', $item)
                    ->select('genre_langs.value', 'genres.url')
                    ->get()
                    ->toArray();
                $category = reset($category);
                $relatedCategoriesBreadcrumbs[$key]['value'] = $category['value'];
                $relatedCategoriesBreadcrumbs[$key]['url'] = $category['url'];
            }
        } elseif (empty($relatedCategoriesBreadcrumbs)) {
            if($page->general != 0){
                $category = Genre::join('genre_langs', 'genres.id', '=', 'genre_langs.genre_id')
                    ->where('genre_langs.lang_id', $this->current_locale->id)
                    ->where('genres.id', $page->general)
                    ->select('genre_langs.value', 'genres.url')
                    ->get()
                    ->toArray();
                $category = reset($category);
                $relatedCategoriesBreadcrumbs[0]['value'] = $category['value'];
                $relatedCategoriesBreadcrumbs[0]['url'] = $category['url'];
            } else {
                $relatedCategoriesBreadcrumbs = [];
            }
        }

        return view('games.url', compact(
            'best', 'url', 'slug', 'lang_page_best', 'current_page', 'url_many', 'page', 'lang_page',
            'categories', 'htmlBlock', 'isMainMenuPage', 'relatedCategoriesBreadcrumbs', 'skipBestTab'));
    }

    /**
     * @param string $url
     * @param string $slug
     * @param int $best
     * @param int $full
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */

    public function postGamesHeroGenry(string $url, string $slug, int $best, int $full, int $id, Request $request, $noJsom = false)
    {
        $genre = false;

        $bestSlug = false;
        $newSlug = false;

        if ($url == 'genre') {
            $genre = $slug;
            if (str_contains($slug, 'best')) {
                $bestSlug = $slug;
                $newSlug = substr($slug, 5);
            } else {
                $bestSlug = 'best-' . $slug;
                $newSlug = $slug;
            }
        }

        //$best = substr($slug, 0, 5) == 'best-';
        $current_page = $request->get('page', 1);
        $success = true;

        //$games = $this->modelGamesHeroGenry($best, $url, $id);
        if ($url === 'filter') {
            $page = Page::where('url', $slug)->first();
            $games = $page->getGamesByFilter($this->current_locale->id)->paginate($this->per_page);
        } else {
            $games = $this->modelGamesHeroGenryTopGood($best, $url, $id);
        }
        //$games->withPath($slug);
        $games->setPath(route('seo.url', compact('slug')));
        $populars = Genre::getPopular($this->current_locale->id);
        $popularLabels = [
            'ru' => 'Популярные категории',
            'en' => 'Popular categories',
            'uk' => 'Популярні категорії'
        ];
        $bestLabels = [
            'ru' => 'Лучшие игры',
            'en' => 'Best games',
            'uk' => 'Найкращі ігри'
        ];

        $locale = app()->getLocale();
        $popularLabel = $popularLabels[$locale];
        $bestLabel = $bestLabels[$locale];
        $html = view('games.url_post', compact('games', 'full', 'populars', 'popularLabel', 'bestLabel', 'genre', 'best', 'bestSlug', 'newSlug'))->render();

        $show_more = $games->currentPage() != $games->lastPage();

        $sum_total_items = $games->total() - $games->currentPage() * $this->per_page;
        $show_number = $sum_total_items < $this->per_page ? $sum_total_items : $this->per_page;

        $retur = compact('success', 'html', 'current_page', 'show_more', 'show_number');

        if ($noJsom)
            return $retur;

        return response()->json($retur, 200);
    }

    /**
     * @param bool $best
     * @param string $url
     * @param int $id
     * @param Request $request
     * @return object
     */
    public function modelGamesHeroGenry($best = false, string $url, int $id): object
    {
        $game_ids = $url == 'genre' ? GamesGenre::getIdsOfGenres(Genre::getParentGenreId($id)) : GamesHeroe::getIdsOfhero([$id]);

        if (count($game_ids) == 0) {
            $game_ids = [9999999999];
        }
        //DB::enableQueryLog();
        $query = Game::query();

        $query->rightJoin('games_langs', 'games.id', '=', 'games_langs.games_id')
            ->where('games_langs.lang_id', $this->current_locale->id)
            ->where('games.public', 1)
            ->whereIn('games.id', $game_ids);

        if ($this->mob) {
            $query->orderBy('games.mobi', 'DESC');
        }

        if ($best) {
            //$query->where('games.rating', '>', 0);
            $query->orderBy('games.best_game', 'DESC')->orderBy('games.rating', 'DESC');
        }

        $query->orderBy('games.created_at', 'DESC')
            ->select('games.id', 'games.image_cat', 'games.url', 'games.video', 'games.best_game',
                'games.rating', 'games.created_at', 'games_langs.name', 'games.mobi');
        //dd(DB::getQueryLog());
        return $query->paginate($this->per_page);
    }


    /**
     * @param bool $best
     * @param string $url
     * @param int $id
     * @param Request $request
     * @return object
     */
    public function modelGamesHeroGenryTop($best = false, string $url, int $id): object
    {
        $game_ids = $url == 'genre' ? GamesGenre::getIdsOfGenres(Genre::getParentGenreId($id)) : GamesHeroe::getIdsOfhero([$id]);

        if (count($game_ids) == 0) {
            $game_ids = [9999999999];
        }
        //DB::enableQueryLog();
        $query = Game::query();

        $query->rightJoin('games_langs', 'games.id', '=', 'games_langs.games_id')
            ->where('games_langs.lang_id', $this->current_locale->id)
            ->where('games.public', 1)
            ->where('games.top', 1)
            ->whereIn('games.id', $game_ids);

        if ($this->mob) {
            $query->orderBy('games.mobi', 'DESC');
        }

        if ($best) {
            //$query->where('games.rating', '>', 0);
            $query->orderBy('games.top', 'DESC')->orderBy('games.rating', 'DESC');
        }

        $query->orderBy('games.created_at', 'DESC')
            ->select('games.id', 'games.image_cat', 'games.url', 'games.video', 'games.best_game',
                'games.rating', 'games.created_at', 'games_langs.name', 'games.mobi');
        //dd(DB::getQueryLog());
        return $query->paginate($this->per_page);
    }


    /**
     * @param bool $best
     * @param string $url
     * @param int $id
     * @param Request $request
     * @return object
     */
    public function modelGamesHeroGenryTopGood($best = false, string $url, int $id): object
    {
        $game_ids = $url == 'genre' ? GamesGenre::getIdsOfGenres(Genre::getParentGenreId($id)) : GamesHeroe::getIdsOfhero([$id]);
        if($best){
            if($url == 'genre'){
                $similarsUnset = GamesSimilar::whereIn('id_game_s', $game_ids)->where('position', '!=', 1)->pluck('id_game_s')->toArray();
                $game_ids = array_diff($game_ids, $similarsUnset);
            }
        }

        if (count($game_ids) == 0) {
            $game_ids = [9999999999];
        }
        //DB::enableQueryLog();
        $query = Game::query();

        $query->rightJoin('games_langs', 'games.id', '=', 'games_langs.games_id')
            ->where('games_langs.lang_id', $this->current_locale->id)
            ->where('games.public', 1)
            ->whereIn('games.id', $game_ids);

        if ($this->mob) {
            $query->orderBy('games.mobi', 'DESC');
        }

        if ($best) {
            //$query->where('games.rating', '>', 0);
            $query->orderBy('games.top', 'DESC')->orderBy('games.good', 'DESC')->orderBy('games.rating', 'DESC');
        }

        $query->orderBy('games.created_at', 'DESC')
            ->select('games.id', 'games.image_cat', 'games.url', 'games.video', 'games.best_game',
                'games.rating', 'games.created_at', 'games_langs.name', 'games.mobi');
        //dd(DB::getQueryLog());
        return $query->paginate($this->per_page);
    }

    /**
     * @param Game $game
     * @return bool
     */
    public function postPlay(Game $game)
    {
        if (is_null($this->update_game_user)) {
            $this->update_game_user = $update_game_user = GamesUnicUser::setUser($game->id);
        }

        if (is_object($this->update_game_user)) {
            $this->update_game_user->increment('count');
        }

        return response()->json(true, 200);
    }

    /**
     * @param Game $game
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postTime(Game $game, Request $request)
    {
        if (is_null($this->update_game_user)) {
            $this->update_game_user = $update_game_user = GamesUnicUser::setUser($game->id);
        }

        if (is_object($this->update_game_user)) {

            $request_teme = '60'; //(int)$request->get('time', 0);
            $count = $this->update_game_user->count;
            $old_date = $this->update_game_user->updated_at->format('Y-m-d H:i:s');

            if (strtotime($old_date) < strtotime('-3 minutes')) {
                $count++;
            }

            $updated_at = date('Y-m-d H:i:s');
            $total_time = $this->update_game_user->total_time + 60;

            $time = (int)$this->update_game_user->total_time / ($count == 0 ? 1 : $count);

            $this->update_game_user->update(compact('total_time', 'time', 'count', 'updated_at'));

            //$date = strtotime('-3 minutes');
        }

        return response()->json(true, 200);
    }

    /**
     * @param Game $game
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postLike(Game $game, Request $request)
    {
        $error = true;
        $message = $this->lang['invalid_request'];
        $like = $request->get('like', 0) == 1 ? 1 : 0;

        $likes = null;

        if ($request->ajax()) {
            try {
                // Check is add commenting
                if ($game->sheckUserLike()) {
                    throw new \Exception($this->lang['you_have_already_voted_game']);
                }

                // Add vodet
                $game_like = new GamesLike();
                $game_like->game_id = $game->id;
                $game_like->ip_user = $request->ip();

                if ($this->user) {
                    $game_like->user_id = $this->user->id;
                }

                $game_like->game_like = $like;
                $game_like->save();

                $likes = $game->updateLikes();

                $error = false;
                $message = $this->lang['your_vote_accepted'];

            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('error', 'message', 'likes'), 200);
    }

    /**
     * @param Game $game
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postFavorite(Game $game, Request $request)
    {
        $success = false;
        $message = $this->lang['invalid_request'];
        $favorite_check = $request->get('favorite', false) == 'true';

        if ($request->ajax()) {
            try {

                $old_favorite = $game->checkFavorite();

                if ($favorite_check) {
                    if ($old_favorite) {
                        throw new \Exception($this->lang['game_already_added_favorites']);
                    }

                    // Create new Favorite record
                    $favorite = new GameFavorite();
                    $favorite->game_id = $game->id;

                    if ($this->user) {
                        $favorite->user_id = $this->user->id;
                    }

                    $favorite->ip_user = $request->ip();
                    $favorite->save();

                    $success = true;
                    $message = $this->lang['added_favorites'];
                } else {
                    $old_favorite->delete();
                    $success = true;
                    $message = $this->lang['removed_from_favorites'];
                }
            } catch (\Exception $e) {
                // do task when error
                $message = $e->getMessage();
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postFavorites()
    {
        $success = true;
        $action = 'favorites';

        $games = Game::getFavorites($this->current_locale->id);

        $html = view('games.favorites_views', compact('games', 'action'))->render();

        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     * @throws \Throwable
     */
    public function postViews()
    {
        $success = true;
        $action = 'views';

        $games = Game::getViews($this->current_locale->id);

        $html = view('games.favorites_views', compact('games', 'action'))->render();

        return response()->json(compact('success', 'html'), 200);
    }

    /**
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postMygamesDelete(Request $request)
    {
        $success = false;
        $message = $this->lang['invalid_request'];
        $game_id = (int)$request->get('game_id', null);
        $favorites = $request->get('avtion') == 'favorites';

        if ($request->ajax() && !empty($game_id)) {

            $game = Game::find($game_id);

            if (!empty($game)) {
                $delete_obj = false;

                if ($favorites) {
                    $delete_obj = $game->checkFavorite();
                } else {
                    $delete_obj = $game->checkVizit();
                }

                if ($delete_obj) {
                    $delete_obj->delete();
                    $success = true;
                    $message = $favorites ? $this->lang['removed_from_favorites'] : $this->lang['you_removed_watched'];
                }
            }
        }

        return response()->json(compact('success', 'message'), 200);
    }

    /**
     * @param array $array
     * @return array
     */
    private function getOneArrayFromMulti(array $array)
    {
        $result = [];
        array_walk_recursive($array, function ($item, $key) use (&$result) {
            $result[] = $item;
        });

        return array_unique($result);
    }

    public function relatedGames(Request $request)
    {
        $html = '';
        /* get current locale */
        $locale = Language::where('code', '=', app()->getLocale())->get()->toArray();
        $locale = reset($locale);
        /* get current locale */
        /* get genres for current game */
        $gamesGenreArr = GamesGenre::where('game_id', '=', $request->game_id)
                        ->select('genry_id')
                        ->get()
                        ->toArray();
        foreach($gamesGenreArr as $item){
            $gamesGenre[] = $item['genry_id'];
        }
        /* get genres for current game */
        /* get child genres for general genres games */
        $childGeneralGenresArr = Genre::whereIn('pid', GamesGeneralOption::GENERAL_GENRE_GAMES)
                                 ->select('id')->get()->toArray();
        foreach($childGeneralGenresArr as $item){
            $childGeneralGenres[] = $item['id'];
        }
        /* get child genres for general genres games */
        /* get similar games for current game */
        $gamesSimilarArr = Game::getGamesOfSimilars(Language::getMain('id'), $request->game_id)->pluck('id')->toArray();

        if($gamesSimilarArr){
            foreach($gamesSimilarArr as $key => $value){
                if($value == $request->game_id){
                    //unset($gamesSimilarArr[$key]);
                    if(isset($gamesSimilarArr[$key+1])){
                        $firstRelatedSimilarGame[] = $gamesSimilarArr[$key+1];
                        $firstSimilar[] = $gamesSimilarArr[$key+1];
                    } elseif($gamesSimilarArr[0] != $request->game_id) {
                        $firstRelatedSimilarGame[] = $gamesSimilarArr[0];
                        $firstSimilar[] = $gamesSimilarArr[0];
                    } else {
                        $firstRelatedSimilarGame[] = $gamesSimilarArr[1];
                        $firstSimilar[] = $gamesSimilarArr[1];
                    }
                    $removeRelatedSimilarGame = $gamesSimilarArr;
                }
            }
        }
        /* get similar games for current game */
        $intersectGeneralGenres = array_intersect($gamesGenre, GamesGeneralOption::GENERAL_GENRE_GAMES);

        $gamesForTwoPlayers = self::getAllTwoPlayersGames();

        $gamesForTwoPlayers[] = (int)$request->game_id;

        $intersectChildGenres = array_intersect($gamesGenre, $childGeneralGenres);

        $topAllGames = self::getAllTopGoodGamesOnePlayer($gamesForTwoPlayers, 'top');

        $goodAllGames = self::getAllTopGoodGamesOnePlayer($gamesForTwoPlayers, 'good');

        $relatedAllGames = array_merge($topAllGames, $goodAllGames);

        if(in_array(GamesGeneralOption::TWO_PLAYERS_GAMES, $gamesGenre)){
            /* if game for two players */

            $topGames = self::relatedTopBestTwoPlayerGames($request->game_id, 'top');

            $goodGames = self::relatedTopBestTwoPlayerGames($request->game_id, 'good');

            $relatedGames = array_merge($topGames, $goodGames);

            /* if game for two players */
        } elseif($intersectGeneralGenres){
            /* if game not for two players and game has general genre */

            foreach($intersectGeneralGenres as $item){
                $intersectGeneralGenresArr[] = $item;
            }
            $intersectGeneralGenresArr = array_diff($intersectGeneralGenresArr, array(GamesGeneralOption::TWO_PLAYERS_GAMES));

            $topGeneralGames = self::relatedTopBestGenreGames($intersectGeneralGenresArr, $request->game_id, 'top');

            $goodGeneralGames = self::relatedTopBestGenreGames($intersectGeneralGenresArr, $request->game_id, 'good');

            $relatedGeneralGames = array_merge($topGeneralGames, $goodGeneralGames);

            $relatedGames = array_unique(array_merge($relatedGeneralGames, $relatedAllGames));

            $relatedGames = array_diff($relatedGames, $gamesForTwoPlayers);

            /* if game not for two players and game has general genre */
        }elseif($intersectChildGenres){
            /* if game not for two players and game has related to general genre */
            foreach($intersectChildGenres as $item){
                $intersectChildGenresArr[] = $item;
            }
            $intersectChildGenresArr = array_diff($intersectChildGenresArr, array(GamesGeneralOption::TWO_PLAYERS_GAMES));

            $topChildGames = self::relatedTopBestGenreGames($intersectChildGenresArr, $request->game_id, 'top');

            $goodChildGames = self::relatedTopBestGenreGames($intersectChildGenresArr, $request->game_id, 'good');

            $relatedChildGames = array_merge($topChildGames, $goodChildGames);

            $relatedGames = array_unique(array_merge($relatedChildGames, $relatedAllGames));

            $relatedGames = array_diff($relatedGames, $gamesForTwoPlayers);
            /* if game not for two players and game has related to  general genre */
        } elseif(!$intersectGeneralGenres && !$intersectChildGenres && !in_array(GamesGeneralOption::TWO_PLAYERS_GAMES, $gamesGenre)){
            /* if no general genre and no general related genre */
            $relatedGames = array_diff($relatedAllGames, $gamesForTwoPlayers);
            /* if no general genre and no general related genre */
        }

        if(isset($firstRelatedSimilarGame) && $firstRelatedSimilarGame || isset($removeRelatedSimilarGame) && $removeRelatedSimilarGame){
            if(isset($firstRelatedSimilarGame) && $firstRelatedSimilarGame){
                $removeKey = array_search($firstRelatedSimilarGame[0], $relatedGames);
                if($removeKey !== false){
                    unset($relatedGames[$removeKey]);
                }
                $relatedGames = array_merge($firstRelatedSimilarGame, $relatedGames);
            }
            if(isset($removeRelatedSimilarGame) && $removeRelatedSimilarGame){
                foreach($relatedGames as $key => $value){
                    if(in_array($value, $removeRelatedSimilarGame)){
                        unset($relatedGames[$key]);
                    }
                }
            }
        }
        shuffle($relatedGames);
        if(isset($firstSimilar) && $firstSimilar){
            $relatedGames = array_merge($firstSimilar, $relatedGames);
        }
        $relatedGames = array_unique($relatedGames);
        $html = self::relatedGamesSliderHTML($relatedGames);

        return $html;
    }

    public static function relatedTopBestTwoPlayerGames($gameId, $action)
    {
        $games = [];
        $gamesArrSQL = Game::join('games_genres', 'games.id', '=', 'games_genres.game_id')
            ->where('games_genres.genry_id', '=', GamesGeneralOption::TWO_PLAYERS_GAMES)
            ->where('games.id', '!=', $gameId)
            ->where('games.public', '=', 1);
        if($action == 'top'){
            $gamesArrSQL->where('games.top', '=', 1);
        } else {
            $gamesArrSQL->where('games.good', '=', 1);
        }
        if(isMobileDevice() AND !isIphoneDevice()){
            $gamesArrSQL->where('games.mobi', '=', 1);
        }
        if(isMobileDevice() AND isIphoneDevice()){
            $gamesArrSQL->where('games.mobi', '=', 1);
            $gamesArrSQL->where('games.iphone', '=', 0);
        }
        $gamesArr = $gamesArrSQL->select('games.id')->get()->toArray();
        foreach($gamesArr as $item){
            $games[] = $item['id'];
        }
        return $games;
    }

    public static function getAllTwoPlayersGames()
    {
        $gamesForTwoPlayers = [];
        $gamesForTwoPlayersArr = Game::join('games_genres', 'games.id', '=', 'games_genres.game_id')
            ->where('games_genres.genry_id', '=', GamesGeneralOption::TWO_PLAYERS_GAMES)
            ->where('games.public', '=', 1)
            ->select('games.id')->get()->toArray();
        foreach($gamesForTwoPlayersArr as $item){
            $gamesForTwoPlayers[] = $item['id'];
        }
        return $gamesForTwoPlayers;
    }

    public static function relatedTopBestGenreGames($genresGame, $gameId, $action)
    {
        $generalGames = [];
        $generalGamesArrSQL = Game::join('games_genres', 'games.id', '=', 'games_genres.game_id')
            ->whereIn('games_genres.genry_id', $genresGame)
            ->where('games.id', '!=', $gameId)
            ->where('games.public', '=', 1);
        if($action == 'top'){
            $generalGamesArrSQL->where('games.top', '=', 1);
        } else {
            $generalGamesArrSQL->where('games.good', '=', 1);
        }
        if(isMobileDevice() AND !isIphoneDevice()){
            $generalGamesArrSQL->where('games.mobi', '=', 1);
        }
        if(isMobileDevice() AND isIphoneDevice()){
            $generalGamesArrSQL->where('games.mobi', '=', 1);
            $generalGamesArrSQL->where('games.iphone', '=', 0);
        }
        $generalGamesArrSQL = $generalGamesArrSQL->select('games.id')->get()->toArray();
        foreach($generalGamesArrSQL as $item){
            $generalGames[] = $item['id'];
        }
        return $generalGames;
    }

    public static function getAllTopGoodGamesOnePlayer($gamesForTwoPlayers, $action)
    {
        $allGames = [];
        $allGamesArrSQL = Game::whereNotIn('games.id', $gamesForTwoPlayers)
            ->where('games.public', '=', 1);
        if($action == 'top'){
            $allGamesArrSQL->where('games.top', '=', 1);
        } else {
            $allGamesArrSQL->where('games.good', '=', 1);
        }
        if(isMobileDevice() AND !isIphoneDevice()){
            $allGamesArrSQL->where('games.mobi', '=', 1);
        }
        if(isMobileDevice() AND isIphoneDevice()){
            $allGamesArrSQL->where('games.mobi', '=', 1);
            $allGamesArrSQL->where('games.iphone', '=', 0);
        }
        $allGamesArr = $allGamesArrSQL->select('games.id')->get()->toArray();
        foreach($allGamesArr as $item){
            $allGames[] = $item['id'];
        }
        return $allGames;
    }

    public static function relatedGamesSliderHTML($relatedGames)
    {
        $html = '<div class="game-swiper-container swiper-container">
                          <div class="game-swiper-wrapper swiper-wrapper">';

        foreach($relatedGames as $item){
            $game = Game::where('id', '=', $item)->select('url', 'image', 'video', 'best_game')->get()->toArray();
            $game = reset($game);
            $gameTitle = GamesLang::whereLangId(app()->getLocale())->whereGamesId($item)->value('name');
            $gameUrl = route('seo.url', ['url' => $game['url']]);
            $gameImage = Storage::disk('images')->url($game['image']);
            $gameVideo = $game['video'];
            $blockLabel = '';
            $gameObj = Game::where('id', '=', $item)->first();
            if($gameObj->isBest($category ?? null) || (!empty($best_game) && $gameObj->best_game == 1)){
                $blockLabel .= '<div class="label-popular"><i class="icon-fire"></i></div>';
            }
            if($gameObj->isUserView()){
                $blockLabel .= '<span class="label-played"><i class="icon-gamepad"></i></span>';
            }
            if($gameObj->checkFavorite()){
                $blockLabel .= '<span class="label-fav"><i class="icon-star"></i></span>';
            }

            $html .= '<div class="thumb swiper-slide">
                              <div class="thumb-inner">
                                  <div class="thumb-link-wrap">
                                      <a class="thumb-link" href="'.$gameUrl.'">
                                          <div class="cursor-layer"></div>
                                          <div class="img-scaler">
                                              <img class="img-scalable demilazyload" 
                                              src="'.$gameImage.'"
                                              srcset="/images/watermark_300x300.png 100w" 
                                              data-srcset="'.$gameImage.' 100w"
                                              sizes="100vw"
                                              alt="'.$gameTitle.'">
                                              '.$blockLabel.'
                                              <div class="thumb-video-wrap">
                                                  <video class="thumb-video" muted="" loop="" data-src="'.$gameVideo.'" playsinline="">
                                                  </video>
                                              </div>
                                          </div>
                                      </a>
                                  </div>
                              </div>
                          </div>';
        }

        $html .= '</div>
                      <div class="swiper-button-prev"></div>
                      <div class="swiper-button-next"></div>
                  </div>';

        return $html;
    }
}
